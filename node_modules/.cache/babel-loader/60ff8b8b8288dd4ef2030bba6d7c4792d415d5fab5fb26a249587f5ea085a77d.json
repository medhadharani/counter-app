{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\counter-app\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 1,\n      tags: []\n    };\n  }\n  renderTags() {\n    //conditionally rendering using if\n    if (this.state.tags.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There is no tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 49\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: tag\n      }, tag, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 48\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), this.state.tags.length === 0 && \"Please create new tags\", this.renderTags()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  }\n  getBadgeClasses() {\n    // create method to add bootstrap for formatCount, Here first initiate a variable and assign the common part of classname for that.\n    let classes = 'badge m-2 text-bg-';\n    classes += this.state.count === 0 ? 'warning' : 'primary';\n    return classes;\n  }\n  formatCount() {\n    //create a method to print count as zero for 0 and otherwise numbers.\n    const {\n      count\n    } = this.state;\n    return count === 0 ? 'Zero' : count;\n  }\n}\nexport default Counter;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Counter","constructor","args","state","count","tags","renderTags","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tag","render","className","getBadgeClasses","formatCount","classes"],"sources":["C:/Users/hp/Documents/counter-app/src/components/counter.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    state = {\r\n        count: 1,\r\n        tags: []\r\n    };\r\n\r\n    renderTags(){//conditionally rendering using if\r\n        if(this.state.tags.length === 0) return <p>There is no tags</p>;\r\n        return <ul>{this.state.tags.map(tag => <li key = {tag}>{tag}</li>)}</ul>;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n                <button className='btn btn-secondary btn-sm'>Increment</button>\r\n                {this.state.tags.length === 0 && \"Please create new tags\"}\r\n                {this.renderTags()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getBadgeClasses() { // create method to add bootstrap for formatCount, Here first initiate a variable and assign the common part of classname for that.\r\n        let classes = 'badge m-2 text-bg-';\r\n        classes += this.state.count === 0 ? 'warning' : 'primary';\r\n        return classes;\r\n    }\r\n\r\n    formatCount(){ //create a method to print count as zero for 0 and otherwise numbers.\r\n        const {count} = this.state;\r\n        return count === 0 ? 'Zero' : count;\r\n    }\r\n}\r\n \r\nexport default Counter;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,OAAO,SAASH,SAAS,CAAC;EAAAI,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC5BC,KAAK,GAAG;MACJC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE;IACV,CAAC;EAAA;EAEDC,UAAUA,CAAA,EAAE;IAAC;IACT,IAAG,IAAI,CAACH,KAAK,CAACE,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,oBAAOR,OAAA;MAAAS,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;IAC/D,oBAAOb,OAAA;MAAAS,QAAA,EAAK,IAAI,CAACL,KAAK,CAACE,IAAI,CAACQ,GAAG,CAACC,GAAG,iBAAIf,OAAA;QAAAS,QAAA,EAAiBM;MAAG,GAATA,GAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5E;EAEAG,MAAMA,CAAA,EAAG;IAEL,oBACIhB,OAAA;MAAAS,QAAA,gBACIT,OAAA;QAAMiB,SAAS,EAAE,IAAI,CAACC,eAAe,CAAC,CAAE;QAAAT,QAAA,EAAE,IAAI,CAACU,WAAW,CAAC;MAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpEb,OAAA;QAAQiB,SAAS,EAAC,0BAA0B;QAAAR,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC9D,IAAI,CAACT,KAAK,CAACE,IAAI,CAACE,MAAM,KAAK,CAAC,IAAI,wBAAwB,EACxD,IAAI,CAACD,UAAU,CAAC,CAAC;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEd;EAEAK,eAAeA,CAAA,EAAG;IAAE;IAChB,IAAIE,OAAO,GAAG,oBAAoB;IAClCA,OAAO,IAAI,IAAI,CAAChB,KAAK,CAACC,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;IACzD,OAAOe,OAAO;EAClB;EAEAD,WAAWA,CAAA,EAAE;IAAE;IACX,MAAM;MAACd;IAAK,CAAC,GAAG,IAAI,CAACD,KAAK;IAC1B,OAAOC,KAAK,KAAK,CAAC,GAAG,MAAM,GAAGA,KAAK;EACvC;AACJ;AAEA,eAAeJ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}